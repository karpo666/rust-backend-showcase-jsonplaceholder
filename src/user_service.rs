use mongodb::{Client, Collection};
use mongodb::bson::doc;
use mongodb::options::ClientOptions;
use crate::user::User;

#[derive(Eq, PartialEq, Debug)]
pub enum DatabaseError {
    UserNotFound(String),
    MongoConnectionFailed,
    OperationFailed
}

/// Get MongoDB collection based on the given configuration.
///
/// ## Arguments.
/// * `connection_string` - Connection string that will be used to connect to MongoDB. Should contain username and password.
/// * `database_name` - Database we are using.
///
/// ## Returns.
/// A result containing possible `DatabaseError` or the collection with name "users".
async fn get_user_collection(connection_string: &str, database_name: &str) -> Result<Collection<User>, DatabaseError> {
    // Parse options and attempt connection.
    let client_options = match ClientOptions::parse(connection_string).await {
        Ok(options) => options,
        _ => return Err(DatabaseError::MongoConnectionFailed)
    };

    // Create client.
    let client = match Client::with_options(client_options) {
        Ok(client) => client,
        _ => return Err(DatabaseError::MongoConnectionFailed)
    };

    // Get collection.
    let collection_name = "users";
    Ok(client.database(database_name).collection(collection_name))
}

/// Get user info from database with id.
///
/// ## Arguments.
/// * `id` - User id.
/// * `connection_string` - Connection string that will be used to connect to MongoDB. Should contain username and password.
/// * `database_name` - Database we are using.
///
/// ## Returns.
/// A result containing possible `DatabaseError` or the user info with given `id`.
async fn get_user_from_db(id: &str, connection_string: &str, database_name: &str) -> Result<User, DatabaseError> {
    // Get collection.
    let collection = get_user_collection(connection_string, database_name).await?;

    // Do query with given filter.
    let user_result = collection.find_one(
        doc! {
            "id": id
        },
        None
    ).await;

    // Handle and return result.
    let user_option = match user_result {
        Ok(option) => option,
        Err(e) => {
            println!("{:?}", e);
            return Err(DatabaseError::UserNotFound(id.to_string()))
        }
    };

    match user_option {
        Some(user) => Ok(user),
        None => Err(DatabaseError::UserNotFound(id.to_string()))
    }
}

/// Add new user info to database.
///
/// ## Arguments.
/// * `user` - New user info.
/// * `connection_string` - Connection string that will be used to connect to MongoDB. Should contain username and password.
/// * `database_name` - Database we are using.
///
/// # Returns.
/// A result containing possible `DatabaseError` or the new id generated by MongoDB.
async fn add_user_to_db(user: &mut User, connection_string: &str, database_name: &str) -> Result<String, DatabaseError> {
    // Get collection.
    let collection = get_user_collection(connection_string, database_name).await?;

    let new_id = (get_users_count(connection_string, database_name).await? as i32 + 101).to_string();

    // Set a new id for user.
    user.id = Some(new_id.clone());

    // Insert new user.
    let insert_result = collection.insert_one(user, None).await;


    // Handle and return result.
    match insert_result {
        Ok(_) => Ok(new_id),
        Err(_) => Err(DatabaseError::OperationFailed)
    }

}

/// Delete user with given id from database.
///
/// ## Arguments.
/// * `id` - Id for the user to be deleted.
/// * `connection_string` - Connection string that will be used to connect to MongoDB. Should contain username and password.
/// * `database_name` - Database we are using.
///
/// # Returns.
/// A result containing possible `DatabaseError` an `Ok(())` if everything goes as it should.
async fn remove_user_from_db(id: &str, connection_string: &str, database_name: &str) -> Result<(), DatabaseError> {
    // Get collection.
    let collection = get_user_collection(connection_string, database_name).await?;

    // Delete user.
    let result = collection.delete_one(
        doc! {
                "id": id
        },
        None
    ).await;

    match result {
        Ok(_) => Ok(()),
        Err(_) => Err(DatabaseError::OperationFailed)
    }
}

/// Get document count from database.
///
/// ## Arguments.
/// * `connection_string` - Connection string that will be used to connect to MongoDB. Should contain username and password.
/// * `database_name` - Database we are using.
///
/// # Returns.
/// A result containing possible `DatabaseError` or the count of users in MongoDB.
async fn get_users_count(database_name: &str, collection_name: &str) -> Result<u64, DatabaseError> {
    // Get collection.
    let collection = get_user_collection(database_name, collection_name).await?;

    // Get user count.
    match collection.count_documents(None, None).await {
        Ok(count) => Ok(count),
        _ => Err(DatabaseError::MongoConnectionFailed)
    }
}

#[cfg(test)]
mod test {
    use testcontainers::GenericImage;
    use testcontainers::clients::Cli;
    use super::*;

    // Database name used in tests.
    const DB_NAME: &str = "showcase_test";
    // Connection string -template.
    const C_STRING: &str = "mongodb://localhost:";

    #[tokio::test]
    async fn test_get_collection_faulty_connection_string() {
        assert!(get_user_collection(&"NOT_URL".to_string(), &"LOL".to_string()).await.is_err());
    }

    #[tokio::test]
    async fn test_get_collection() {
        let client = Cli::default();
        let container = client.run(get_mongo_image());

        let port = container.get_host_port_ipv4(27017);
        let connection_string = format!("{}{}", C_STRING, port);

        let collection_result =
            get_user_collection(&connection_string, DB_NAME).await
        ;

        assert!(collection_result.is_ok());

        let collection = collection_result.unwrap();
        assert_eq!("users", collection.name());

        container.stop();
    }

    #[tokio::test]
    async fn test_get_user_from_database_not_found() {
        let client = Cli::default();
        let container = client.run(get_mongo_image());

        let port = container.get_host_port_ipv4(27017);
        let connection_string = format!("{}{}", C_STRING, port);

        assert_eq!(
            Err(DatabaseError::UserNotFound("666".to_string())),

            get_user_from_db(
                &"666".to_string(),
                &connection_string,
                DB_NAME
            ).await
        );

        container.stop();
    }

    #[tokio::test]
    async fn test_add_and_get_user_from_database() {
        let client = Cli::default();
        let container = client.run(get_mongo_image());

        let port = container.get_host_port_ipv4(27017);
        let connection_string = format!("{}{}", C_STRING, port);

        let insert_result =
            add_user_to_db(
                &mut User::create_test_user(None),
                &connection_string,
                DB_NAME
            ).await
        ;

        assert!(insert_result.is_ok());
        let inserted_id = insert_result.unwrap();

        let search_result =
            get_user_from_db(
                &inserted_id,
                &connection_string,
               DB_NAME
            ).await
        ;

        assert!(search_result.is_ok());
        let user = search_result.unwrap();

        assert_eq!(inserted_id, user.id.unwrap());

        container.stop();
    }

    #[tokio::test]
    async fn test_add_and_get_and_remove_user_from_database() {
        let client = Cli::default();
        let container = client.run(get_mongo_image());

        let port = container.get_host_port_ipv4(27017);
        let connection_string = format!("{}{}", C_STRING, port);

        let insert_result =
            add_user_to_db(
                &mut User::create_test_user(None),
                &connection_string.clone(),
                DB_NAME
            ).await
        ;

        assert!(insert_result.is_ok());
        let inserted_id = insert_result.unwrap();

        let search_result =
            get_user_from_db(
                &inserted_id,
                &connection_string,
                DB_NAME
            ).await
        ;

        assert!(search_result.is_ok());
        let user_id = search_result.unwrap().id.unwrap();

        assert_eq!(&inserted_id, &user_id);

        let delete_result =
            remove_user_from_db(
                &user_id,
                &connection_string,
                DB_NAME
            ).await
        ;

        assert!(delete_result.is_ok());
        assert_eq!(
            get_user_from_db(
                &user_id,
                &connection_string,
                DB_NAME
            ).await,
            Err(DatabaseError::UserNotFound(user_id))
        );

        container.stop();
    }

    fn get_mongo_image() -> GenericImage {
        GenericImage::new("mongo", "latest")
            .with_env_var("MONGO_INITDB_DATABASE", "showcase_test")
            .with_exposed_port(27017)
    }
}
